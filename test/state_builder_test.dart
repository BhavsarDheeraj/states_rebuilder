import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:states_rebuilder/src/inject.dart';
import 'package:states_rebuilder/src/injector.dart';
import 'package:states_rebuilder/src/reactive_model.dart';
import 'package:states_rebuilder/src/state_builder.dart';
import 'package:states_rebuilder/src/states_rebuilder.dart';

void main() {
  Model model;
  setUp(() {
    model = Model();
  });

  testWidgets(
    'StateBuilder is subscribed with default tag (context) and rebuild after get notified',
    (tester) async {
      BuildContext context;
      final widget = StateBuilder(
        models: [model],
        builder: (ctx, _) {
          context = ctx;
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Text('${model.counter}'),
          );
        },
      );

      await tester.pumpWidget(widget);
      expect(find.text('0'), findsOneWidget);

      //increment and notify all observer
      model.increment();
      model.rebuildStates();
      await tester.pump();
      expect(find.text('1'), findsOneWidget);

      //increment and notify observer with autoGeneratedTag
      model.increment();
      model.rebuildStates([context]);
      await tester.pump();
      expect(find.text('2'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder is subscribed with custom tag and rebuild after get notified',
    (tester) async {
      final widget = StateBuilder(
        models: [model],
        tag: 'tag1',
        builder: (ctx, _) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Text('${model.counter}'),
          );
        },
      );

      await tester.pumpWidget(widget);
      expect(find.text('0'), findsOneWidget);

      //increment and notify observer with custom tag
      model.increment();
      model.rebuildStates(['tag1']);
      await tester.pump();
      expect(find.text('1'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder is subscribed with list of custom tag and rebuild after get notified',
    (tester) async {
      final widget = StateBuilder(
        models: [model],
        tag: ['tag1', 'tag2'],
        builder: (ctx, _) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Text('${model.counter}'),
          );
        },
      );

      await tester.pumpWidget(widget);
      expect(find.text('0'), findsOneWidget);

      //increment and notify observer with custom tag1
      model.increment();
      model.rebuildStates(['tag1']);
      await tester.pump();
      expect(find.text('1'), findsOneWidget);

      //increment and notify observer with custom tag2
      model.increment();
      model.rebuildStates(['tag2']);
      await tester.pump();
      expect(find.text('2'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder is subscribed with list of custom dynamic tag and rebuild after get notified',
    (tester) async {
      final widget = StateBuilder(
        models: [model],
        tag: [Tags.tag1, 2],
        builder: (ctx, _) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Text('${model.counter}'),
          );
        },
      );

      await tester.pumpWidget(widget);
      expect(find.text('0'), findsOneWidget);

      //increment and notify observer with custom Tags.tag1
      model.increment();
      model.rebuildStates([Tags.tag1, 2]);
      await tester.pump();
      expect(find.text('1'), findsOneWidget);

      //increment and notify observer with custom 2
      model.increment();
      model.rebuildStates([2]);
      await tester.pump();
      expect(find.text('2'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder when disposed remove tags',
    (tester) async {
      bool switcher = true;
      final widget = StateBuilder(
        models: [model],
        tag: ['mainTag'],
        builder: (ctx, _) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Builder(
              builder: (context) {
                if (switcher) {
                  return StateBuilder(
                    models: [model],
                    tag: 'childTag',
                    builder: (context, _) {
                      return Text('${model.counter}');
                    },
                  );
                }
                return Text('false');
              },
            ),
          );
        },
      );

      await tester.pumpWidget(widget);
      expect(model.observers().length, equals(4));
      expect(find.text('0'), findsOneWidget);

      switcher = false;
      model.rebuildStates(['mainTag']);
      await tester.pump();
      expect(model.observers().length, equals(2));
      expect(find.text('false'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder when disposed and all tags are removed cleaner is called',
    (tester) async {
      bool switcher = true;
      final model2 = Model();
      int numberOfCleanerCall = 0;
      model2.cleaner(() {
        numberOfCleanerCall++;
      });
      final widget = StateBuilder(
        models: [model],
        tag: ['mainTag'],
        builder: (ctx, _) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Builder(
              builder: (context) {
                if (switcher) {
                  return StateBuilder(
                    models: [model2],
                    tag: 'childTag',
                    builder: (context, _) {
                      return Text('${model2.counter}');
                    },
                  );
                }
                return Text('false');
              },
            ),
          );
        },
      );

      await tester.pumpWidget(widget);
      expect(model.observers().length, equals(2));
      expect(model2.observers().length, equals(2));
      expect(find.text('0'), findsOneWidget);
      //
      switcher = false;
      model.rebuildStates(['mainTag']);
      await tester.pump();
      expect(model.observers().length, equals(2));
      expect(model2.observers().length, equals(0));
      expect(numberOfCleanerCall, equals(1));
      expect(find.text('false'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder subscribe to two model and rebuild',
    (tester) async {
      final model2 = Model();

      final widget = StateBuilder(
        models: [model, model2],
        builder: (ctx, _) {
          return Directionality(
              textDirection: TextDirection.ltr,
              child: Text('${model2.counter}'));
        },
      );

      await tester.pumpWidget(widget);
      expect(model.observers().length, equals(1));
      expect(model2.observers().length, equals(1));
      expect(find.text('0'), findsOneWidget);
      //
      model2.increment();
      model.rebuildStates();
      await tester.pump();
      expect(find.text('1'), findsOneWidget);
      //
      model2.increment();
      model2.rebuildStates();
      await tester.pump();
      expect(find.text('2'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder should call initState and afterInitialBuild and afterRebuild',
    (tester) async {
      int numberOfInitStateCall = 0;
      int numberOfAfterInitialBuildCall = 0;
      int numberOfAfterRebuildCall = 0;
      String lifeCycleTracker = '';
      final widget = StateBuilder(
        models: [model],
        initState: (_, __) {
          numberOfInitStateCall++;
          lifeCycleTracker += "initState, ";
        },
        afterInitialBuild: (_, __) {
          numberOfAfterInitialBuildCall++;
          lifeCycleTracker += "afterInitialBuild, ";
        },
        afterRebuild: (_, __) {
          numberOfAfterRebuildCall++;
          lifeCycleTracker += "afterRebuild, ";
        },
        builder: (ctx, _) {
          lifeCycleTracker += "build, ";
          return Directionality(
              textDirection: TextDirection.ltr,
              child: Text('${model.counter}'));
        },
      );

      await tester.pumpWidget(widget);

      expect(numberOfInitStateCall, equals(1));
      expect(numberOfAfterInitialBuildCall, equals(1));
      expect(numberOfAfterRebuildCall, equals(1));
      expect(lifeCycleTracker,
          equals('initState, build, afterInitialBuild, afterRebuild, '));

      //
      model.rebuildStates();
      await tester.pump();
      expect(numberOfInitStateCall, equals(1));
      expect(numberOfAfterInitialBuildCall, equals(1));
      expect(numberOfAfterRebuildCall, equals(2));
      expect(
          lifeCycleTracker,
          equals(
              'initState, build, afterInitialBuild, afterRebuild, build, afterRebuild, '));
    },
  );

  testWidgets(
    'StateBuilder should call dispose callback',
    (tester) async {
      bool switcher = true;

      int numberOfDisposeCall = 0;

      final widget = StateBuilder(
        models: [model],
        tag: ['mainTag'],
        builder: (ctx, _) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Builder(
              builder: (context) {
                if (switcher) {
                  return StateBuilder(
                    models: [model],
                    tag: 'childTag',
                    dispose: (_, __) => numberOfDisposeCall++,
                    builder: (context, _) {
                      return Text('${model.counter}');
                    },
                  );
                }
                return Text('false');
              },
            ),
          );
        },
      );

      await tester.pumpWidget(widget);
      expect(numberOfDisposeCall, equals(0));

      switcher = false;
      model.rebuildStates(['mainTag']);
      await tester.pump();
      expect(numberOfDisposeCall, equals(1));
    },
  );

  testWidgets(
    'StateBuilder should call disposeModel works',
    (tester) async {
      bool switcher = true;
      final modelWithoutDispose = ModelWithoutDispose();
      final widget = StateBuilder(
        models: [model],
        tag: ['mainTag'],
        builder: (ctx, _) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Builder(
              builder: (context) {
                if (switcher) {
                  return StateBuilder(
                    models: [model, modelWithoutDispose],
                    tag: 'childTag',
                    disposeModels: true,
                    builder: (context, _) {
                      return Text('${model.counter}');
                    },
                  );
                }
                return Text('false');
              },
            ),
          );
        },
      );

      await tester.pumpWidget(widget);
      switcher = false;
      model.rebuildStates(['mainTag']);
      await tester.pump();
      expect(model.numberOfDisposeCall, equals(1));
    },
  );

  testWidgets(
    'StateBuilder should buildWithChild works',
    (tester) async {
      final widget = StateBuilder(
        models: [model],
        builderWithChild: (ctx, _, child) {
          return Directionality(
            textDirection: TextDirection.ltr,
            child: Column(
              children: <Widget>[
                Text('${model.counter}'),
                child,
              ],
            ),
          );
        },
        child: Text('${model.counter}'),
      );

      await tester.pumpWidget(widget);
      expect(find.text('0'), findsNWidgets(2));
      //
      model.increment();
      model.rebuildStates();
      await tester.pump();
      expect(find.text('0'), findsOneWidget);
      expect(find.text('1'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder should onSetState and onRebuildState works',
    (tester) async {
      int numberOfOnSetStateCall = 0;
      int numberOfOnRebuildStateCall = 0;
      String lifeCycleTracker = '';
      final widget = StateBuilder(
        models: [model],
        onSetState: (_, __) {
          lifeCycleTracker += 'onSetState, ';
          numberOfOnSetStateCall++;
        },
        onRebuildState: (_, __) {
          lifeCycleTracker += 'onRebuildState, ';
          numberOfOnRebuildStateCall++;
        },
        builder: (ctx, _) {
          lifeCycleTracker += 'rebuild, ';
          return Directionality(
              textDirection: TextDirection.ltr,
              child: Text('${model.counter}'));
        },
      );

      await tester.pumpWidget(widget);
      expect(numberOfOnSetStateCall, equals(0));
      expect(numberOfOnRebuildStateCall, equals(0));
      expect(lifeCycleTracker, equals('rebuild, '));
      //
      model.rebuildStates();
      await tester.pump();
      expect(numberOfOnSetStateCall, equals(1));
      expect(numberOfOnRebuildStateCall, equals(1));
      expect(lifeCycleTracker,
          equals('rebuild, onSetState, rebuild, onRebuildState, '));
    },
  );

  testWidgets(
    'StateBuilder should watch works for primitives',
    (tester) async {
      int numberOfRebuild = 0;
      final widget = StateBuilder(
        models: [model],
        watch: (_) {
          return model.counter;
        },
        builder: (ctx, _) {
          return Directionality(
              textDirection: TextDirection.ltr,
              child: Text('${++numberOfRebuild}'));
        },
      );

      await tester.pumpWidget(widget);
      expect(find.text('1'), findsOneWidget);

      //state do not change
      model.rebuildStates();
      await tester.pump();
      expect(find.text('1'), findsOneWidget);

      //state changes
      model.increment();
      model.rebuildStates();
      await tester.pump();
      expect(find.text('2'), findsOneWidget);

      //state do not change
      model.rebuildStates();
      await tester.pump();
      expect(find.text('2'), findsOneWidget);

      //state changes
      model.increment();
      model.rebuildStates();
      await tester.pump();
      expect(find.text('3'), findsOneWidget);

      //state do not change
      model.rebuildStates();
      await tester.pump();
      expect(find.text('3'), findsOneWidget);
    },
  );

  testWidgets(
    'StateBuilder should watch works for reference type',
    (tester) async {
      int numberOfRebuild = 0;
      final widget = StateBuilder(
        models: [model],
        watch: (_) {
          List list = [model.counter];
          return list;
        },
        builder: (ctx, _) {
          return Directionality(
              textDirection: TextDirection.ltr,
              child: Text('${++numberOfRebuild}'));
        },
      );

      await tester.pumpWidget(widget);
      expect(find.text('1'), findsOneWidget);

      //state do not change
      model.rebuildStates();
      await tester.pump();
      expect(find.text('1'), findsOneWidget);

      //state changes
      model.increment();
      model.rebuildStates();
      await tester.pump();
      expect(find.text('2'), findsOneWidget);

      //state do not change
      model.rebuildStates();
      await tester.pump();
      expect(find.text('2'), findsOneWidget);

      //state changes
      model.increment();
      model.rebuildStates();
      await tester.pump();
      expect(find.text('3'), findsOneWidget);

      //state do not change
      model.rebuildStates();
      await tester.pump();
      expect(find.text('3'), findsOneWidget);
    },
  );

  testWidgets(
    "should string equality work : (== : true) (identical : false) (hashCode : true)",
    (WidgetTester tester) async {
      final s = {
        'list': [1],
      };
      final s1 = s.toString();
      final s2 = Map.from(s).toString();

      final _equality = s1 + '1' == s2 + '1';
      final _identical = identical(s1 + '1', s2 + '1');
      final _hashCode = (s1 + '1').hashCode == (s2 + '1').hashCode;

      expect(_equality, isTrue);
      expect(_identical, isFalse);
      expect(_hashCode, isTrue);
    },
  );
  testWidgets(
    "StateBuilder throw if no builder or builderWithChild ",
    (WidgetTester tester) async {
      expect(() => StateBuilder(models: [model]), throwsAssertionError);
    },
  );

  testWidgets(
    "StateBuilder throw if builderWithChild is defined without child parameter",
    (WidgetTester tester) async {
      expect(
          () => StateBuilder(
                models: [model],
                builderWithChild: (_, __, child) => child,
              ),
          throwsAssertionError);
    },
  );

  testWidgets(
    "StateBuilder 'onSetState' is called one for each frame (_isDirty)",
    (WidgetTester tester) async {
      final model = Model();
      List<String> _rebuildTracker = [];
      await tester.pumpWidget(
        StateBuilder(
          models: [model],
          onSetState: (context, model) => _rebuildTracker.add('onSetState'),
          onRebuildState: (context, model) =>
              _rebuildTracker.add('onRebuildState'),
          builder: (_, __) {
            _rebuildTracker.add('rebuild');
            return Container();
          },
        ),
      );

      expect(_rebuildTracker, equals(['rebuild']));
      model.rebuildStates();
      model.rebuildStates();
      await tester.pump();
      expect(_rebuildTracker,
          equals(['rebuild', 'onSetState', 'rebuild', 'onRebuildState']));
    },
  );

  testWidgets(
    "StateBuilder throws if  models is null and a dynamic generic type is defined",
    (WidgetTester tester) async {
      final widget = StateBuilder(
        builder: (_, rm) {
          return Container();
        },
      );
      await tester.pumpWidget(widget);
      expect(tester.takeException(), isException);
    },
  );

  testWidgets(
    "StateBuilder accept empty models",
    (WidgetTester tester) async {
      final widget = StateBuilder(
        models: [],
        builder: (_, rm) {
          return Container();
        },
      );
      await tester.pumpWidget(widget);
      expect(tester.takeException(), isNull);
    },
  );

  testWidgets(
    "StateBuilder creates and expose new reactive instance",
    (WidgetTester tester) async {
      ReactiveModel<int> reactiveModel1;
      ReactiveModel<int> reactiveModel2;
      final widget = Injector(
        inject: [Inject(() => 2)],
        builder: (_) {
          return Column(
            children: <Widget>[
              StateBuilder<int>(
                builder: (_, rm) {
                  reactiveModel1 = rm;
                  return Container();
                },
              ),
              StateBuilder<int>(
                builder: (_, rm) {
                  reactiveModel2 = rm;
                  return Container();
                },
              ),
            ],
          );
        },
      );
      await tester.pumpWidget(widget);
      expect(reactiveModel1, isA<ReactiveModel<int>>());
      expect(reactiveModel2, isA<ReactiveModel<int>>());
      expect(reactiveModel1 != reactiveModel2, isTrue);
    },
  );

  testWidgets(
    "StateBuilder expose the first model in the models parameter list",
    (WidgetTester tester) async {
      ReactiveModel<int> reactiveModel1;
      ReactiveModel<int> reactiveModel2;
      final widget = Injector(
        inject: [Inject(() => 2), Inject(() => 'String')],
        builder: (_) {
          return Column(
            children: <Widget>[
              StateBuilder<int>(
                models: [Injector.getAsReactive<int>()],
                builder: (_, rm) {
                  reactiveModel1 = rm;
                  return Container();
                },
              ),
              StateBuilder(
                models: [
                  Injector.getAsReactive<int>(),
                  Injector.getAsReactive<String>(),
                ],
                builder: (_, rm) {
                  reactiveModel2 = rm;
                  return Container();
                },
              ),
            ],
          );
        },
      );
      await tester.pumpWidget(widget);
      expect(reactiveModel1, isA<ReactiveModel<int>>());
      expect(reactiveModel2, isA<ReactiveModel<int>>());
      expect(reactiveModel1 == reactiveModel2, isTrue);
    },
  );

  testWidgets(
      "StateBuilder should work with ReactiveModel.create when widget is updated",
      (WidgetTester tester) async {
    ReactiveModel modelRM1;
    ReactiveModel modelRM2;
    final widget = Builder(
      builder: (context) {
        modelRM1 = ReactiveModel.create(0);
        return MaterialApp(
          home: Column(
            children: <Widget>[
              StateBuilder(
                  models: [modelRM1],
                  builder: (_, __) {
                    return Column(
                      children: <Widget>[
                        Text('modelRM1-${modelRM1.value}'),
                        Builder(
                          builder: (context) {
                            modelRM2 = ReactiveModel.create(0);
                            return StateBuilder(
                                models: [modelRM2],
                                builder: (_, __) {
                                  return Text('modelRM2-${modelRM2.value}');
                                });
                          },
                        ),
                      ],
                    );
                  }),
            ],
          ),
        );
      },
    );
    await tester.pumpWidget(widget);
    expect(find.text('modelRM1-0'), findsOneWidget);
    expect(find.text('modelRM2-0'), findsOneWidget);
    //
    modelRM2.setValue(() => 1);
    await tester.pump();
    expect(find.text('modelRM1-0'), findsOneWidget);
    expect(find.text('modelRM2-1'), findsOneWidget);

    //
    modelRM1.setValue(() => 1);
    await tester.pump();
    expect(find.text('modelRM1-1'), findsOneWidget);
    expect(find.text('modelRM2-0'), findsOneWidget);

    modelRM2.setValue(() => modelRM2.value + 1);
    await tester.pump();
    expect(find.text('modelRM1-1'), findsOneWidget);
    expect(find.text('modelRM2-1'), findsOneWidget);
  });
}

class Model extends StatesRebuilder {
  int counter = 0;
  int numberOfDisposeCall = 0;
  void increment() {
    counter++;
  }

  dispose() {
    numberOfDisposeCall++;
  }
}

class ModelWithoutDispose extends StatesRebuilder {
  int counter = 0;
  int numberOfDisposeCall = 0;
  void increment() {
    counter++;
  }
}

enum Tags { tag1, tag2, tag3 }
